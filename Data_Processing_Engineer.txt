<실기 1회>

카디널리티: 튜플의 수
디그리: 속성의 수

DB 모델 구성 3요소
- 연산
- 구조
- 제약조건

접근통제
- DAC (임의 접근 통제) => Discretionary
- MAC (강제 접근 통제) => Mandatory
- RBAC (역할 기반 접근 통제) => Role-Based

결합도: 자료 < 스탬프 < 제어 < 외부 < 공통 < 내용
- 내용결합도: 다른 모듈 내부에 있는 변수나 기능을 다른
모듈에서 사용하는 경우
- 스탬프결합도: 모듈 간의 인터페이스로 배열이나 오브젝트,
자료구조 등이 전달되는 경우
- 공통결합도: 파라미터가 아닌 모듈 밖에서 선언되어 있는
전역 변수를 참조하고 전역변수를 갱신하는 식으로 상호작용함

세션 하이재킹: 세션을 가로채다
=> 정당한 사용자의 세션 상태를 훔치거나 도용하여 액세스하는 보안 공격 기술

<실기 2회>
Ad-hoc network: 네트워크 장치를 필요로하지 않고 멀티 홉
라우팅 기능에 의해 무선 인터페이스가 가지는 통신 거리상의
제약을 극복

UI용어
UX => 유저 경험
UI => 유저 인터페이스

트랜잭션 특성 중 원자성(Atomicity)
=> 트랜잭션이 데이터베이스 모두 반영되거나 아니면
전혀 반영되지 않아야 된다.

DB 테이블에서 값 변경 => 갱신한다!
점수가 90점 이상인 학생의 학점을 'A'로 변경
[SQL]
: UPDATE 학생 SET 학점 = 'A' WHERE 점수 >= 90;

AES 알고리즘 => DES 보완한 알고리즘
SEED => 블록 암호화 알고리즘

GoF[Gang of Four] 디자인 패턴
- 구조
- 생성
- 행위: 객체들의 상호작용을 패턴화한 것

[SQL] <학생정보> 테이블의 학과와 <학과정보> 테이블의 학과가
같은 학생의 이름 검색 => JOIN 이용
SELECT 이름 
FROM 학생정보 a JOIN 학과정보 b 
ON a.학과 = b.학과
[단, a, b는 각각 학생정보와 학과정보의 Alias]

White Box Test Coverage
모든 문장 -> 구문(문장)
전체 조건식 -> 결정(분기)
모든 개별 조건식 -> 조건

[SQL]
LIKE에서 '이'로 시작하면 '이%'
            '이'로 끝나면 '%이'
            '이'를 포함하면 '%이%'

※ 저결고응
응집도: 우논시절통순기

순서에 따라 => Procedural Cohesion
동일한 입출력사용 => Communication
단일기능요소로 1모듈 All 기능 => Functional Cohesion

로킹: 트랜잭션들이 사용하는 자원에 대해 1 트랜잭션이
 사용하는 데이터를 다른 트랜잭션이 접근하지 못하게
상호배제 기능 제공

패킷교환방식
- 가상회선방식: 연결형
- 데이터그램방식: 비연결형

하향식: 테스트 Stub
상향식: 테스트 Driver

객동기에서
객체: Information이라고도 함 => (Object Diagram)
동적: Dynamic => 상태도(STD) (State Diagram)
기능적: DFD 활용 (Data Flow Diagram)

Static method => 정적 메소드: 메소드 호출시 객체 생성 X
*(arr + 0) => arr의 첫번째 위치

기출 분석 및 실기 3회 합격 전략

원자성: ALL 반영 or Never 반영

<트랜잭션 특징> ACID
Atomic Isolation
원자성: All 반영 No 반영
일관성: 트랜잭션 성공 완료시 언제나 일관성있는 DB로
상태변환함
독립성: 한 트랜잭션 연산중 타 트랜잭션 끼어듬 불가능
영속성: 성공적 완료 트랜잭션 결과는 시스템고장나도
영구적 반영되어야함

애플리케이션 성능 측정 지표 => 처응경자
1.처리량 2. 응답시간 3.경과시간 4.자원사용률
V모델: 단위 -> 통합 -> 시스템 -> 인수 (단 통 시 인)
RSA => 비대칭키 암호화 알고리즘
Land Attack:
WAS; Web Application Server

코드 인스펙션: 정적테스트의 가장 일반적인 유형
=> 사전 정의된 코드 작성 규칙 기반으로 소스코드 점검
작성 규칙 위반 소스코드 추출하는 분석도구

프로토콜 3요소: 구문 의미 타이밍

목표 복구 시간(RTO; Recovery Time Objective)
비동기식 자바스크립트 XML
AJAX
Select 학번, 이름 From 학생 Where 학년 in (3,4)
애자일

트랜잭션 연산 실패시 다시 그 이전으로 되돌리는 제어어:ROllback
IP에 보안성을 제공해주는 표준화 기술: IPSec

정적테스트: 실행하지 않고 소스코드 결함 발견
Create Index idx_name on student(name);

형상관리기법 도구: CVS, SVN, Git
리팩토링 목적: 쉬운 이해, 쉬운 수정

Delete from 학생 where 이름 = '민수';

EAI 구축 유형
Message Bus
Hybrid
Point to Point
Hub & Spoke

Select 과목이름, min(점수) as 최소점수, max(점수) as 최대점수
from 성적
Group by 과목이름
Having avg(점수)>=90;

분산환경에서 빅데이터 저장, 처리할 수 있는 자바 기반의
<오픈소스> 프레임워크로 더그 커팅과 마이크 캐퍼렐라가 개발
구글 맵리듀스를 대체!! => Hadoop

샘플링 오라클: 특정 몇 몇 입력 값들에 대해서만 원하는
결과를 제공해쥬는 오라클

Select 학과, count(학과) as 학과별튜플수
from 학생
group by 학과

프로세스간 인터페이스
IPC 메소드

도부이결다조
1  2 3 B  4 5

공개키 기반 구조(PKI; Public Key Infrastructure)
:

BCP(Business Continutiy Planning)
: 재난시 업무 복구 및 고객 비즈니스 지속성 보장
RTO(Recovery Time Objective)
: 재해복구 목표시간
RPO(Recovery Point Objective)
: 재해복구시점목표
BGP(Border Gateway Protocol, 경계 경로 프로토콜)
: Autonomous System 중 라우팅 및 도달 가능성 정보를 교환
하도록 설계된 표준화된 외부 게이트웨이 프로토콜 中 1
규칙기반 옵티마이저(RBO; Rule-Based Optimizer)
: 통계 정보가 없는 상태에서 사전 등록된 규칙에 따라 질의
실행 계획을 선택하는 옵티마이저
비용기반 옵티마이저(CBO; Cost-Based Optimizer)
: 통계 정보로부터 모든 접근 경로를 고려한 질의 실행 계획
선택 옵티마이저

<애플리케이션 테스트>
회복테스트
: 정상적 복귀여부 확인

조건/결정 커버리지
: 전체+ 개별 조건식 참1번 거짓1번

결정 커버리지
: 결정문 적어도 1번 등장

구문 커버리지
: 모든 명령문 적어도 1번은 실행

변경조건/결정 커버리지
: 전체조건식에 독립적

안전 테스트
: 불법 SW 접근 방지

조건 커버리지
: 각 조건 적어도 1번은 참 or 거짓

<SW 테스트>
회귀테스트: 오류 제거 or 수정 후 
회복테스트: 고의 실패 유도 후 정상 복귀 여부 확인
안전테스트: 소스 내의 보안적 결함 확인
강도테스트: 과부하시 정상적 동작 확인
성능테스트: 응답시간, 특정시간, 처리량, 시스템 반응속도 테스트
구조테스트: 시스템 내부 경로 or 소스코드 복잡도 테스트
병행테스트: 변경된 시스템과 기존 시스템에 동일한
데이터 입력 후 결과 비교

테스트 커버리지
: 구문 결정 조건 조건결정 변경조건-결정 다중조건

루비기반 테스트: watir
웹기반 테스트케이스: FitNesse

스머프: 출발지 주소를 공격 대상으로 정해서 직접 마비시킴
RUDY: 요청 헤더의 컨텐츠 길이를 비정상적으로 크게 설정
티어드롭: 공격자가 IP Fragment Offset 값을 서로 중첩되게 조작
=> 시스템 마비
스턱스넷: PLC를 감염시켜 장비의 동작 변경
스니핑: 네트워크 중에 패킷도청하는 것

<효율적 정보 시스템 개발>
모듈화: 설계와 구현의 변경에 따르는 영향 극소화
재사용성:  SW 품질, 개발자 생산성 높여줌
확장성: 다형성을 통해 애플리케이션 서비스와 특성 변경
제어의 역흐름: APP 확장 메소드를 호출함으로써 제어가 프레임워크로부터
APP으로 반대로 흐르게 함

고가용성(HA; High Availability)
: server, network, program 등 정보시스템이 시스템의 장애에
대응하여 상당히 오랜 기간 동안 지속적으로 정상운영 가능한
성질

배치프로그램 
=> 정기배치, 이벤트배치, 온디맨드 배치

싱글톤 패턴 => 객체 하나!!!만 생성(어디든 참조 가능)

정형기술검토(워크스루, 동료검토, 인스펙션, 라운드로빈)
워크스루: 회의전에 검토자료 배포해 사전검토후 짧게 회의 진행 
동료검토: 2~3명이 리뷰식으로 진행
인스펙션: 전문가나 팀 검사로 오류를 찾아내는 공식적검토기법

코드 난독화 => 역공학을 통한 공격을 막기 위해 program
소스코드를 알아보기 힘들게 바꾸는 기술

테스트 시나리오 => 테스트 절차
테스트 하네스 => 단위 또는 모듈테스트

Iaas(인프라형 서비스)
Paas(플랫폼형 서비스)
Saas(SW형 서비스)

