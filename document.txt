▶ 오픈소스(Open Source): '공개된 소스코드'------------------
1. 특정한 소프트웨어를 개발한 개발자의 권리를 지키면서 누구나 소스코드를 확인할 수 있도록 함
2. 소스코드 공개의 의미=무료(Free)
3. 가장 대표적인 오픈 소스 => 부트스트랩(Bootstrap)
: 가장 유명한 웹 디자인 프레임워크 중 하나, 부트스트랩은 세계적으로 가장 큰 오픈 소스 저장소인 Git Hub에서 확인 가능

컨트리뷰션 => 말 그대로 기여한다는 의미
: 기능 추가, 보안 취약점 수정 등 뿐만 아니라 오타 수정, 번역, 의견 제시 등도 이에 해당
※ 누구나 컨트리뷰션 가능!!!

컨트리뷰션을 하는 이유?
1. 오픈 소스 활동 자체는 공개된 기록으로 남음 => 구직 활동시 이력서에 활동 이력을 담을 수 있음
2. 내가 작업한 새로운 기능을 다른 개발자들도 사용해보고, 이를 평가하여 개선 가능

커미터 => 실제로 누군가 컨트리뷰션을 하면, 해당 내용을 리뷰하고 실제 프로젝트에 반영할지를 결정하는 사람
: 특정 프로젝트를 오픈 소스로 만들어서 관리하는 사람들을 의미함

프로젝트를 오픈 소스로 공개하는 이유
1. 사회 공헌
2. 소프트웨어 품질 향상
3. 어쩔 수 없이(저작권, 라이센스로 인하여)

cf). 대표적인 오픈 소스 라이센스
- MIT License: 무료, 배포 가능, 소스코드 수정 가능, 2차 저작물 공개 의무 X
- Apache License: 무료, 배포 가능, 소스코드 수정 가능, 2차 저작물 공개 의무 X
- GPL: 무료, 배포 가능, 소스코드 수정 가능, 2차 저작물 공개 의무 O
- Beerware: 만나면 그냥 술이나 사주자

▶ Git(깃) => 협업 관리 도구---------------------------------
: 하나의 프로젝트를 여러 명과 함께 효과적으로 관리하여 협업 가능하게 함
cf). SVN => 중앙 서버 존재

※ 깃의 장점
- 분산적인 개발
- 효율적인 개발
- 비선형적인 개발
- 변경 이력 보장

▶ Git의 동작 원리----------------------------------------------
: 기본적으로 깃 프로젝트에 담겨 있는 데이터들은 파일 시스템 상에서의 스냅샷(Snapshot)이라고 볼 수 있음, 실제로 프로젝트를 커밋(Commit)하여 적용할 때의 순간을 중요시한다는 특징이 있음, 파일 자체를 저장하기보다 수정 내역 자체를 저장


※ Git 프로젝트의 세 가지 구성요소
- Working Directory: 작업할 파일이 있는 디렉토리
- Staging Area: 커밋(Commit)을 수행할 파일들이 올라가는 영역
- Git Directory: Git 프로젝트의 메타 데이터와 데이터 정보가 저장되는 디렉토리
※ .git 폴더 지우면 깃 프로젝트 정상 동작 X
∴ 깃 프로젝트는 위와 같은 구성요소를 통해 동작하게 됨

그리하여 실제로 소스코드를 수정하는 등의 작업을 해서 커밋(Commit)하고, 다시 저장소에 있는 수정 내역을 자신의 컴퓨터로 옮기는 과정들은 아래와 같다.

<Git 동작 과정>
Working		   Staging			Local		         Remote
Directory		     Area	         	          Repository		       Repository
	|git add>>            
			   |git commit>>
					              |git push>>
						<< git fetch|
<<============git merge==============|

컴퓨터 자체에 .git 폴더에는 반영이 되지만, 실제로 remote repository에는 반영이 안된다.
하지만, git push를 하면 반영이 된다.	
일반적으로 git fetch와 git merge를 한 번에 사용하는 명령어인 git pull을 많이 사용함

※ 저장소 Repository에 대해서
: 저장소(Repo)는 실제 소스코드가 담겨 있으면서 커밋(Commit) 내역 등의 모든 작업 이력이 담겨 있는 공간
=> 실제로 프로젝트의 메타 데이터를 포함해 각종 데이터는 .git 폴더에 담기게 됨, 실제로 .git 폴더를 열어 보면 각종 데이터와 헤시 값 등이 담겨 있음

어떠한 파일을 Commit하게 되면 각 작업들을 분류하기 위해 내부적으로 해당 작업에 대한 헤시(Hash)값을 이용함
일반적으로 헤시 값은 충돌 발생 X => 정확히 커밋 내역들 관리 가능

▶ <실전> 소스코드 수정
▷ 일반적인 소스코드 수정 사례 두 가지
1. 해당 프로젝트에 소속된 사람이 아닌 경우
: 만약 특정 커뮤니티의 구성원이 아니라 스스로 커밋을 하여 저장소에 적용할 권한이 없다면, 소스코드를 수정하는 것에 제약이 있음
이런 경우 PR(Pull Request)를 작성하여 오픈 소스에 기여 가능
이 경우는 우리가 큰 오픈 소스 프로젝트의 구성원으로 참여하고 싶을 때 사용하는 방법임
PR에 수정 사항 등을 담아 전송하면, 해당 오픈 소스의 관리자가 이를 허용했을 때 실제로 오픈 소스에 반영이 될 수 있음

2. 해당 프로젝트에 소속된 사람인 경우
: 자신이 해당 프로젝트에 대한 권한을 갖고 있으므로, 그냥 커밋(Commit)하고 푸시(Push)해서 저장소에 수정 내역을 반영하면 됨

※ 소스코드 수정하여 Git 저장소에 반영하기
난 초보자이므로, 2번 케이스를 따라서 내가 만든 깃 저장소에 수정된 내역을 반영하는 방법에 대해 공부해보겠음

깃은 동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 브랜치 기능을 제공
서로 다른 브랜치는 작업을 함에 있어서 서로 영향 X => 마음 놓고 서로 다른 개발 작업 수행 가능

실제 프로젝트에서 주 버전이 마스터브랜치
마스터브랜치=> 기본적으로 깃 저장소를 만들면 자동으로 마스터 브랜치 생성
: 일반적으로는 배포가 가능한 수준의 안정화된 버전 포함
∴ 별도의 브랜치를 만들어 사용하고자 한다면 체크아웃(Checkout) 명령어 이용

병합(Merge) 수행 전까지 안정적으로 배포가 이뤄지다가, 모든 기능이 합쳐진 이후에 다시 배포할 수 있으므로 개발의 안정성이 매우 뛰어날 수 밖에 없음
통합 브랜치: 배포 가능한 수준의 브랜치, 일반적으로 마스터 브랜치를 의미
토픽 브랜치: 특정 기능을 위해 만들어짐, 일반적으로 마스터 이외의 다른 브랜치를 의미